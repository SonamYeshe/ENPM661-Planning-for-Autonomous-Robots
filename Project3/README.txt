## Project #3

# General
Implement the a* path planning algorithm for the point robot(project 2 revision part) and the differential drive robot(specifically Turtlebot2).

# Files Explanation
There are 2 SourceCode repositories and 2 Output repositories because this project also needs to revise previous project.

SourceCodeForProject2:
	1. "AStarSearch" is the main function, the start and goal points are given in line #17&#18, feel free to change them.
	2. "isValid" is the file to detect whether the new point is in the free space - in another word, valid or not.
	3. "isValid2" is the file uses half-plane models. Feel free to change the name of "isValid" to anything else and change the "isValid2" to "isValid" to see the results.

SourceCodeForProject3:
	1. "MainFunction" is the main function, the start and goal points are given in line #47&#48, feel free to change them. It requires the text file "map" to read the occupancy grid getting from gmapping in gazebo.
	2. "GenerateVelocity" requires the final path positions then generate the Turtlebot center's linear and angular velocities and it's 2 wheels' rotational velocity. Finally save them into two different text files called "Twist.txt" and "WheelRotationalVelocity".(If you run the matlab file again, they'll be generated in this folder while the copy is in the "OutputForProject3" folder.)
	3. "Inflate" is the file to inflate the obstacles with the thickness equals to the radius of the Turtlebot2. By doing this, we can regard the Turtlebot2 as a point robot without volume.
	4. "isValid" is the file to detect whether the new point is in the free space - in another word, valid or not.

InputForProject3:
	"rrlab.sdf" is the world file TA provides. I use turtlebot_world.launch and gmapping_demo.launch in the turtlebot_gazebo package, view_navigation.launch in the turtlebot_rviz_launchers package, keyboard_teleop.launch in the turtlebot_teleop package to do the gmapping and get "rrl.yaml", "rrl.pgm" file. Then I echo the /map to read the occupancy grid, this is how I get the "map.txt" file in the SourceCodeForProject3.

# Run
Open "AStarSearch.m" or "MainFunction.m" file and click F5 to run. If you want to change the start and goal points, please make that change in the line #17&#18 in the "AStarSearch.m" or the line #47&#48 in the "MainFunction.m" and run again.
Enjoy the figure output even it really takes time.

# Future
I guess we'll be provided with a ROS node to broadcast the generated geometry_msgs/Twist to simulate in the Gazebo. If you are going  to do that, pleaase run following commands in different terminals first:
```
$ roscore
$ roslaunch turtlebot_gazebo turtlebot_world.launch world_file:=<path to the rrlab.sdf>
```
Then
```
$ roslaunch turtlebot_teleop keyboard_teleop.launch
or
$ roslaunch kobuki_keyop keyop.launch
```
to move the Turtlebot to the start points which is defined in the line #47 in the "MainFunction.m" and rotate the robot to face the positive x axis orientation.
Finally, please use the boadcasting node to send the message to the /mobile_base/commands/velocity topic and to see if the Turtlebot2 follows the path generated by the "MainFunction.m" matlab file.
